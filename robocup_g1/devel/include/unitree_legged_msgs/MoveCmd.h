// Generated by gencpp from file unitree_legged_msgs/MoveCmd.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_MOVECMD_H
#define UNITREE_LEGGED_MSGS_MESSAGE_MOVECMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct MoveCmd_
{
  typedef MoveCmd_<ContainerAllocator> Type;

  MoveCmd_()
    : vx(0)
    , vy(0)
    , vyaw(0)  {
    }
  MoveCmd_(const ContainerAllocator& _alloc)
    : vx(0)
    , vy(0)
    , vyaw(0)  {
  (void)_alloc;
    }



   typedef int8_t _vx_type;
  _vx_type vx;

   typedef int8_t _vy_type;
  _vy_type vy;

   typedef int8_t _vyaw_type;
  _vyaw_type vyaw;





  typedef boost::shared_ptr< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MoveCmd_

typedef ::unitree_legged_msgs::MoveCmd_<std::allocator<void> > MoveCmd;

typedef boost::shared_ptr< ::unitree_legged_msgs::MoveCmd > MoveCmdPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::MoveCmd const> MoveCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vyaw == rhs.vyaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18fcabcb0c44aa42a27c53f36efde302";
  }

  static const char* value(const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18fcabcb0c44aa42ULL;
  static const uint64_t static_value2 = 0xa27c53f36efde302ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/MoveCmd";
  }

  static const char* value(const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 vx\n"
"int8 vy\n"
"int8 vyaw\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vyaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::MoveCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::MoveCmd_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vyaw: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vyaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_MOVECMD_H
